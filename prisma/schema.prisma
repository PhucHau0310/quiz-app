// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // Uses connection pooling
  url = env("POSTGRES_PRISMA_URL")
  // Uses direct connection, ⚠️ make sure to keep this to `POSTGRES_URL_NON_POOLING`
  // or you'll have dangling databases from migrations
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String?
  email     String   @unique
  avatar    String?
  scores    Score[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Quiz {
  id       Int          @id @default(autoincrement())
  question String
  answers  Answer[]
  correct  QuizCorrect?
}

model Answer {
  id           Int           @id @default(autoincrement())
  text         String
  isCorrect    Boolean       @default(false)
  quizId       Int
  quiz         Quiz          @relation(fields: [quizId], references: [id])
  quizCorrects QuizCorrect[] @relation("AnswerToQuizCorrect")
}

model QuizCorrect {
  id              Int    @id @default(autoincrement())
  quizId          Int    @unique
  quiz            Quiz   @relation(fields: [quizId], references: [id])
  correctAnswerId Int
  correctAnswer   Answer @relation("AnswerToQuizCorrect", fields: [correctAnswerId], references: [id])
}

model Score {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  score     Int
  createdAt DateTime @default(now())
}
